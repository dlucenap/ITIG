/***************************************************************************
 *            simulador.h
 *
 *  Mon Jan  5 00:17:49 2009
 *  Copyright  2009  Diego Antonio Lucena Pumar
 *  Email diego dot lucena dot pumar at gmail dot com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
#include <cstdlib>
#include <cmath>

#ifndef RAND_MAX
#define RAND_MAX 1
#endif
#include "carril.h"
#define CTIEMPO 0.6666

class           simulador {
  private:
    carril simu;
    float           xi,
                    xf,
                    v_media,
                    d_media;
    dato           *ptrestadistico;
    float           tiempo_simu;
    float           tiempo_coche;
  public:
                    simulador();	// constructor
    int             exec_simulacion(float tusuario);
    void            mostrar_estadisticas(float v_media, float d_media, int num_coches);
	void estadisticas_genereales(dato *datoaux, float v_media, float d_media, int num_coches);
  };
simulador::simulador()
{
}
int
                simulador::exec_simulacion(float tusuario)
{
    tiempo_simu = 0;
    tiempo_coche = 0;
    tiempo_simu += CTIEMPO;
    vehiculo       *
	nuevo_vehiculo;
    while (tiempo_simu < tusuario) {
	if (tiempo_coche > tiempo_simu) {
	    simu.c_vehiculos->insertarnodo(nuevo_vehiculo->
					   getnuevo_vehiculo());
	    printf("Nuevo vehiculo insertado en la lista...\n");
	} else {
	    printf("Vehiculo no insertado...\n");
	}
	xi = simu.c_vehiculos->devolv_sum_x_n();
	simu.c_vehiculos->actualizar_vehiculos();
	xf = simu.c_vehiculos->devolv_sum_x_n();
	v_media =
	    simu.c_estadisticas->velocidad_media(xi, xf, tiempo_simu);
	d_media =
	    simu.c_estadisticas->densidad_media(simu.c_vehiculos->ptrult->
						getx_n(),
						simu.c_vehiculos->
						getnum_coches());

	ptrestadistico = new dato(v_media, d_media);
	simu.c_estadisticas->insertarnodo(ptrestadistico);
	mostrar_estadisticas(v_media, d_media,
			     simu.c_vehiculos->getnum_coches());
	tiempo_coche = tiempo_simu + (-0.3333) * log(1 - drand48());
	tiempo_simu += CTIEMPO;
    }
	estadisticas_genereales(simu.c_estadisticas->ptrprim,v_media, d_media, simu.c_vehiculos->getnum_coches());
	printf("Simulacion terminada...\n");
	return 0;
	}


void simulador::mostrar_estadisticas(float v_media, float d_media, int num_coches)
{
    printf("************** ESTADISTICOS **************\n");
    printf("******************************************\n");
    printf("VELOCIDAD MEDIA = %f m/s\n", v_media);
    printf("DENSIDAD MEDIA = %f vehiculos/m^2\n", d_media);
    printf("NUMERO DE VEHICULOS = %i unidades\n", num_coches);
    printf("******************************************\n");
    printf("******************************************\n");
    getchar();
}
void simulador::estadisticas_genereales(dato *datoaux, float v_media, float d_media, int num_coches){
float  sum_d_media_general = 0;
    float  sum_v_media_general = 0;
    //ptraux = simu.c_estadisticas->ptrprim;
    do {
	sum_d_media_general += datoaux->getd_media();
	sum_v_media_general += datoaux->getv_media();
	datoaux = datoaux->ptrsiguiente;
    } while (datoaux != 0);
    printf("********* ESTADISTICOS GENERALES *********\n");
    printf("******************************************\n");
    printf("VELOCIDAD MEDIA GENERAL = %f m/s\n",
	   sum_v_media_general /num_coches);
    printf("DENSIDAD MEDIA GENERAL = %f vehiculos/m^2\n",
	   sum_d_media_general / num_coches);
    printf("NUMERO DE VEHICULOS = %i unidades\n",
	   num_coches);
    printf("******************************************\n");
    printf("******************************************\n");
    getchar();
}
