	(***********************************************************
	************************************************************
	           FUNCIONES PARA EL MANEJO DEL TABLERO
	************************************************************
	************************************************************)


(**********************************************************************
Función que devuelve el número de fila en la que se encuentra la 
posición x.
***********************************************************************)

let fila = function x -> if x mod 12 = 0 then (x / 12) 
                         else (x / 12)+1;;

(**********************************************************************
Función que devuelve el número de columna en la que se encuentra la 
posición x.
***********************************************************************)

let columna = function x -> if x mod 12 = 0 then 12 
			    else x mod 12;;

(**********************************************************************
Función que devuelve la lista con los índices que forman la fila
en la que está situada la casilla que se pasa como parámetro.
***********************************************************************)

let listaFila = function x ->
let n = (fila x)-1 in [1+n*12;2+n*12;3+n*12;4+n*12;5+n*12;6+n*12;7+n*12;
		       8+n*12;9+n*12;10+n*12;11+n*12;12+n*12];;

(**********************************************************************
Función que devuelve la lista con los índices que forman la columna en
la que está situada una determinada casilla.
***********************************************************************)

let listaColumna = function x ->
let n = columna x in [n;n+12;n+24;n+36;n+48;n+60;n+72;n+84;n+96;n+108;
		      n+120;n+132];;

(**********************************************************************
Función para obtener el cuadrado en el que se encuentra una posición.
***********************************************************************)

let cuadrado = function x ->
  if (x > 0) & ((fila x)-1)/3 = 0 then 
	(((columna x)-1)/4) + 1 
  else if ((fila x)-1)/3 = 1 then 
	(((columna x)-1)/4) + 4 
  else if ((fila x)-1)/3 = 2 then 
	(((columna x)-1)/4) + 7
  else if ((fila x)-1)/3 = 3 then 
	(((columna x)-1)/4) + 10  
  else
	failwith "La posicion dada no es correcta.";;


(**********************************************************************
Función que devuelve una lista con los índices del cuadrado al que 
pertenece un cierto elemento.
***********************************************************************)

let listaCuadrado = function x ->
let n = cuadrado x in [1+36*((n-1)/3)+4*((n-1) mod 3);
		       2+36*((n-1)/3)+4*((n-1) mod 3);
		       3+36*((n-1)/3)+4*((n-1) mod 3);
		       4+36*((n-1)/3)+4*((n-1) mod 3);
		       13+36*((n-1)/3)+4*((n-1) mod 3);
		       14+36*((n-1)/3)+4*((n-1) mod 3);
		       15+36*((n-1)/3)+4*((n-1) mod 3);
		       16+36*((n-1)/3)+4*((n-1) mod 3);
		       25+36*((n-1)/3)+4*((n-1) mod 3);
		       26+36*((n-1)/3)+4*((n-1) mod 3);
		       27+36*((n-1)/3)+4*((n-1) mod 3);
		       28+36*((n-1)/3)+4*((n-1) mod 3)];;

(**********************************************************************
Función que elimina valores de una lista.
***********************************************************************)

let rec eliminar n = function  [] -> []
                         | x::l -> if n=0 then x::l 
	       			  else eliminar (n-1) l;;


(**********************************************************************
Función que obtiene de una lista otra lista con el número de elementos 
dado.
***********************************************************************)

let rec obtiene n = function  [] -> if n=0 then [] 
				    else []
                         | x::l -> if n=0 then [] 
				   else x::obtiene (n-1) l;;

(**********************************************************************
Función a la que se le pasa un valor y una lista, y nos devuelve
la posición del valor en la lista si está. En caso contrario, devuelve
la longitud de la lista dada mas uno.
***********************************************************************)

let rec buscarPos val = function [] -> 1
			|x::l -> if x=val then 1 
	  		         else 1 + buscarPos val l;;

(**********************************************************************
Función que devuelve el índice del valor que se le pasa como parámetro.
Si el valor no está en la lista, devuelve cero.
***********************************************************************)

let buscarIndice val lista = let indice = buscarPos val lista in
	if indice > list_length lista then 0 
	else indice;;

(**********************************************************************
Función que recibe un string y lo transforma en una lista de caracteres.
***********************************************************************)

let rec cadenaAlista = function cadena -> let long = string_length cadena in
	if long = 0 then []
	else (nth_char cadena 0) :: cadenaAlista (sub_string cadena 1 (long-1));;


(**********************************************************************
Función que recibe una lista de caracteres y la transforma en una lista 
de enteros, incluyendo los caracteres A y B independientemente de que 
sean mayúscula o minúscula, a los que dá los valores 10 y 11 
respectivamente. 
***********************************************************************)

let rec listaEnteros = function [] -> []
|n::l -> if n=`a` or n=`A` then 
		10::listaEnteros(l)
	else if	n=`b` or n=`B` then 
		11::listaEnteros(l)
	else (int_of_char n - int_of_char `0`)::listaEnteros(l);;

(**********************************************************************
Función que devuelve el valor de la casilla pasada como parámetro.
***********************************************************************)

let elemento = function casilla -> function [] -> failwith "El tablero esta vacio o no es correcto."
	|(tablero : int list) -> obtiene 1 (eliminar (casilla-1) tablero);;


(**********************************************************************
Función que añade un valor n en la lista. Tiene que ser un entero.
***********************************************************************)

let rec aniadir n = function [] -> [n]
	|x::l -> if x=(n : int)
             then x::l
             else if x>n
                    then n::x::l
                    else x::(aniadir n l);;

(**********************************************************************
FunciÓn que ordena una lista.
***********************************************************************)

let rec ordenar = function [] -> []
	|x::l -> aniadir x (ordenar l);;

(**********************************************************************
Función que concatena dos listas.
***********************************************************************)

let rec merge lista = function []->lista
	|x::l -> merge (aniadir x lista) l;;

(**********************************************************************
Función que recibe el índice de una casilla y devuelve una lista con 
todos los índice que pertenecen a la misma fila, columna y cuadrado.
***********************************************************************)

let listaIndices = function x -> merge (merge (ordenar (listaFila x)) (ordenar (listaColumna x))) (ordenar (listaCuadrado x));;

(**********************************************************************
Función que devuelve el primer elemento de una lista.
***********************************************************************)

let primerElemento = function  [] -> failwith "Lista Vacia"
|x::_ -> (x : int);;

(**********************************************************************
Función que relaciona a cada índice con el valor que contiene.
***********************************************************************)

let rec listaValores lista = function [] -> []
|x::l -> primerElemento(elemento x lista)::(listaValores lista l);;

(**********************************************************************
Función que devuelve la lista que contiene el tablero completo.
***********************************************************************)

let listaCompleta tablero = function  x -> listaValores tablero (listaIndices x);;

(**********************************************************************
Función que busca en una lista los números del 0 al 11 que faltan.
***********************************************************************)

let rec faltan l n = if n = -1
                           then []
                           else if buscarIndice n l = -2
                                 then n::faltan l (n-1)
                                 else faltan l (n-1);;

let faltan11 l = ordenar (faltan l 11);;

(**********************************************************************
Función que dados dos valores (casilla y tablero) devuelve una lista
con los posibles valores que podría adoptar esa casilla.
***********************************************************************)

let posibles = function casilla -> function tablero -> faltan11(listaCompleta tablero casilla);;

(**********************************************************************
Función que comprueba si tan solo hay un valor posible para esa casilla.
***********************************************************************)

let posibilidadUnica = function x::[] -> true
			|_-> false;;

(**********************************************************************
Función que devuelve como una lista las casillas vacias del tablero.
***********************************************************************)

let rec listaVaciosAux n = function [] -> []
		|x::l -> if x = -2 then n::listaVaciosAux (n+1) l
			else listaVaciosAux (n+1) l;;

let listaVacios = function [] -> failwith "Lista vacía"
		|l -> listaVaciosAux 1 l;;

(**********************************************************************
Función que representa en pantalla el Sudoku.
***********************************************************************)

let rec dibujarSudoku = function [] -> begin
					   print_string "------------------------------------"
					end
|c1::c2::c3::c4::c5::c6::c7::c8::c9::c10::c11::c12::tablero -> begin
								print_string "-------------------------------------"; print_newline();
								print_string " | "; print_char c1;
								print_string " | "; print_char c2;
								print_string " | "; print_char c3;
								print_string " | "; print_char c4;
								print_string " | "; print_char c5;
								print_string " | "; print_char c6;
								print_string " | "; print_char c7;
								print_string " | "; print_char c8;
								print_string " | "; print_char c9;
								print_string " | "; print_char c10;
								print_string " | "; print_char c11;
								print_string " | "; print_char c12;
								print_string " |"; print_newline();
								dibujarSudoku tablero;
							       end

|[] -> failwith ("Lista vacía")
|_ -> failwith ("Tamaño equivocado");;

(* FUNCION QUE IMPRIME EL TABLERO 9x9 JUNTO CON LOS VALORES DE LA LISTA *)
let rec imprimeTablero = function [] -> begin
									print_string "------------------------------------"
	  end
|a1::a2::a3::a4::a5::a6::a7::a8::a9::a10::a11::a12::tablero -> begin
											  print_string "-------------------------------------"; print_newline();
											  print_string "| "; print_int a1;
											  print_string " | "; print_int a2;
											  print_string " | "; print_int a3;
											  print_string " | "; print_int a4;
											  print_string " | "; print_int a5;
											  print_string " | "; print_int a6;
											  print_string " | "; print_int a7;
											  print_string " | "; print_int a8;
											  print_string " | "; print_int a9;
											  print_string " | "; print_int a10;
											  print_string " | "; print_int a11;
											  print_string " | "; print_int a12;
											  print_string " |"; print_newline();
											  imprimeTablero tablero;
									      end
|_ -> failwith ("Tamaño equivocado");;

(* imprimir detecta una lista vacia como error y si no coloca una linea para que la impresion
sea correcta y cuidar la presentacion *)
let imprimir = function
[] -> failwith ("La lista no puede estar vacía")
|tablero -> begin
		print_newline();
		dibujarSudoku tablero;
	  end;;




	(***********************************************************
	************************************************************
	    FUNCIONES PARA DETERMINAR SI UN SUDOKU ES CORRECTO
	************************************************************
	************************************************************)



(***********************************************************
Función que a partir de un valor y una lista nos devuelve otra 
lista con el valor eliminado. 
************************************************************)

let rec eliminaValorLista n = function [] -> []
			     |x::l -> if n = (x : int) then eliminaValorLista n l else x::eliminaValorLista n l;;

(***********************************************************
Función que a partir de una lista y un índice nos devuelve 
otra lista compuesta por la fila, columna y cuadrado a la 
que pertenece el índice menos el valor que corresponde a 
dicho índice. 
************************************************************)

let listaValoresCasillas tablero = function  x -> listaValores tablero (eliminaValorLista x (listaIndices x));;

(***********************************************************
Función que nos devuelve una lista con los valores utilizados 
en las casillas que ocupan su fila, columna y cuadrado.
************************************************************)

let listaValoresUtilizados tablero = function x -> ordenar (listaValoresCasillas tablero x);;

(***********************************************************
Función que quita de una lista las casillas vacías. 
************************************************************)

let quitarCasillasVacias = function [] -> []
|x::l -> if x = -2 then l else x::l;;


(***********************************************************
Función auxiliar de la función existeValor. 
************************************************************)

let hayValor = function x -> function l -> -2 != buscarIndice x l;;

(***********************************************************
Función que comprueba si dado un valor, existe en la lista. 
************************************************************)

let existeValor = function x -> function tablero -> function n -> hayValor x (quitarCasillasVacias(listaValoresUtilizados tablero n));;


(***********************************************************
Función que comprueba que el Sudoku es correcto.
************************************************************)

let rec comprobar n tablero = function [] -> true
	|tabla -> if n <= 144 then 
			if (existeValor (primerElemento(elemento n tablero)) tablero n) then 
				false
	   		else (comprobar (n+1) tablero tabla)
	   	  else true;;

(***********************************************************
Función que llama de manera adecuada a la función comprobar. 
************************************************************)

let correcto = function [] -> failwith "Lista vacia"
	|tablero -> comprobar 1 tablero tablero;;


		


	(***********************************************************
	************************************************************
	         FUNCIONES PARA DESARROLLAR LOS HEURÍSTICOS
	************************************************************
	************************************************************)

(***********************************************************
Función que crea una lista que contiene las listas de los 
posibles valores que puede tomar una casilla. Si el valor ya
está dado, la sublista correspondiente a esa casilla 
contendrá dicho valor 
************************************************************)

let rec posiblesListas tablero n = function [] -> []
		|x::l -> if x = -2 then 
			    (posibles n tablero)::(posiblesListas tablero (n+1)l)
			 else 
			    [x]::(posiblesListas tablero (n+1) l);;

(***********************************************************
Función que llama de manera adecuada a la función 
posiblesListas.
************************************************************)

let heuler = function [] -> failwith "Lista vacía"
|l -> posiblesListas l 1 l;;

(***********************************************************
Función que va creando una lista de enteros con los valores 
que ya están fijos en el sudoku. El resto de las casillas
las representará con el valor -2 (casilla vacía).  
************************************************************)

let rec listaPosibles = function [] -> []	
	|x::l -> if posibilidadUnica x then
			 (primerElemento x)::listaPosibles l
		 else -2::listaPosibles l;;




	(***********************************************************
	************************************************************
	                  FUNCIONES DE BACKTRACKING
	************************************************************
	************************************************************)

(***********************************************************
Función que nos dice si la lista tiene 2 valores.   
************************************************************)

let dosPosibilidades = function x::y::[] -> true
		|_ -> false;;

(***********************************************************
Función auxiliar de busca2.   
************************************************************)

let rec busca2Aux tablero = function [] -> failwith "No hay casillas con dos posibilidades"
|x::l ->
	if dosPosibilidades(posibles x tablero) then 
		x
	else 
		(busca2Aux tablero l);;

(***********************************************************
Función que busca en el tablero una casilla en la que haya 
solo 2 posibles valores.   
************************************************************)

let busca2 = function [] -> failwith "Lista vacia"
	|tablero -> busca2Aux tablero (listaVacios(tablero));;

(***********************************************************
Función auxiliar de primerValor   
************************************************************)

let primerValorAux = function [] -> failwith "Lista vacia"
			|x::l -> x;;

(***********************************************************
Función que elige entre 2 valores el primero. 
************************************************************)

let primerValor = function tablero -> primerValorAux(posibles(busca2 tablero)tablero);;

(***********************************************************
Función auxiliar de segundoValor.  
************************************************************)

let segundoValorAux = function [] -> failwith "lista vacia"
	|x::y::l -> y
	|x::[] -> failwith "La lista debe tener 2 valores";;

(***********************************************************
Función que elige entre 2 valores el segundo. 
************************************************************)

let segundoValor = function tablero -> segundoValorAux(posibles(busca2 tablero)tablero);;

(***********************************************************
Función que dado un índice coloca un valor en esa posición de 
la lista. 
************************************************************)
let rec insertaValor indice valor = function [] -> failwith "La lista está vacia o el indice es incorrecto"
	|x::l -> if indice = 1 then 
			valor::l
		 else if indice > 1 then 
			x::(insertaValor (indice-1) valor l)
		       else failwith "Indice incorrecto";;


(***********************************************************
Función que coloca en una casilla que solo puede tomar dos 
valores, el primer valor. 
************************************************************)

let colocaPrimero = function [] -> []
	|tablero -> begin
				print_string ("colocamos " ^ (string_of_int (primerValor tablero)) ^ " en la casilla " ^ (string_of_int (busca2 tablero)));
				print_newline();
				insertaValor (busca2 tablero)(primerValor tablero)(tablero);
		    end;;

(***********************************************************
Función que coloca en una casilla que solo puede tomar dos 
valores, el segundo valor. 
************************************************************)

let colocaSegundo = function [] -> []
	|tablero -> begin
				print_string ("colocamos " ^ (string_of_int (segundoValor tablero)) ^ " en la casilla " ^ (string_of_int (busca2 tablero)));
				print_newline();
				insertaValor (busca2 tablero)(segundoValor tablero)(tablero);
		    end;;


(***********************************************************
Función auxiliar de incorrecto.
************************************************************)

let rec incorrectoAux tablero = function [] -> false
	|x::l -> if (posibles x tablero) = [] then 
			true
		 else 
			(incorrectoAux tablero l);;

(***********************************************************
Función que detecta si hay alguna casilla en la que es 
imposible insertar un valor. 
************************************************************)

let incorrecto = function [] -> failwith "Lista vacia"
	|tablero -> incorrectoAux tablero (listaVacios tablero);;

(***********************************************************
Función que comprueba si el Sudoku está resuelto. 
************************************************************)

let resuelto tablero = listaVacios tablero = [];;

(***********************************************************
Función para evitar posibles errores debidos a bucles 
infinitos al aplicar los heurísticos. 
************************************************************)

let redundancia = function [] -> failwith "Lista vacia"
		|l -> l = (listaPosibles (heuler l));;

(***********************************************************
Función que aplica los heurísticos si el sudoku no está 
resuelto o no se ha caído en un bucle infinito. 
************************************************************)

let rec aplicarHeuristicos = function [] -> failwith "lista vacia"
		|l -> if resuelto l then
			l
		      else 
	     		if (redundancia l) then 
			    l
	     		else 
	        	    aplicarHeuristicos(listaPosibles (heuler l));;

(***********************************************************
Función que resuelve el sudoku de acuerdo a su dificultad.
************************************************************)

let rec resuelveSudoku = function tablero -> let facil = listaPosibles (heuler tablero) in
if resuelto facil then 
  facil
else
  if not incorrecto facil then
	if tablero = facil then 
		let primero = resuelveSudoku(colocaPrimero facil) in
		if resuelto primero then 
			primero 
		else 
			resuelveSudoku (colocaSegundo facil) 
	else 
		resuelveSudoku facil
  else tablero;;



	(***********************************************************
	************************************************************
	             FUNCIONES PARA INICIAR LA APLICACIÓN
	************************************************************
	************************************************************)

(***********************************************************
Función que pide al usuario que introduzca el sudoku y lo 
lee
************************************************************)

let fil = if vect_length(sys__command_line)=1
	then begin
			print_string "Escriba el enunciado del Su Doku de la forma 001002030405060606... ";
			print_newline();
			read_line()
		 end
	else vect_item sys__command_line 1;;

(***********************************************************
Convertimos la cadena de caracteres introducida por teclado
en lista de enteros.
************************************************************)

let sudoku = cadenaAlista fil;;					(*let sudoku = listaEnteros ( cadenaAlista fil);;*)

let sudokuEnteros = listaEnteros sudoku;;

(***********************************************************
Programa principal.
************************************************************)

dibujarSudoku sudoku;;
print_newline();;
print_string "Solucion...";;
let solucion = resuelveSudoku sudokuEnteros;;
imprimeTablero solucion;;
print_newline();;
print_string "-----o-----";;
print_newline();;
